# Window type settings
#
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".
wintypes:
{
  normal = { fade = false; shadow = true; full-shadow = false; }
  tooltip = { fade = false; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false;}
  toolbar = { shadow = true; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 1; full-shadow=true; shadow = false; }
  dropdown_menu = { opacity = 1; }
  utility = { shadow = false; };
  splash = { shadow = false; };
  dialog = { shadow = false; };
  combo = { shadow = false; };
};

# Rule-based per-window options.
# these shits do not work somehow
rules : (
{
  match = "window_type = 'tooltip'";
  fade = false;
  shadow = false;
  opacity = 0.05;
  full-shadow = true;
}
);
# {
#   match = "window_type = 'dock'    || "
#           "window_type = 'desktop' || "
#           "_GTK_FRAME_EXTENTS@";
#   blur-background = false;
# },
# {
#   match = "window_type != 'dock'";
#   # shader = "my_shader.frag";
# },
# {
#   match = "window_type = 'dock' || "
#           "window_type = 'desktop'";
#   corner-radius = 0;
# },
# {
#   match = "class_g  = 'Xfce4-terminal'";
#   corner-radius = 0;
#   shadow = false;
# },
# { match = "fullscreen"; corner-radius = 0; },
# {
#   match = "name = 'Notification'   || "
#           "class_g = 'Conky'       || "
#           "class_g ?= 'Notify-osd' || "
#           "class_g = 'Cairo-clock' || "
#           "_GTK_FRAME_EXTENTS@";
#   shadow = false;
# },

#################################
#           Corners             #
#################################

# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
#
# Default: 0 (disabled)
corner-radius = 5;

# exclude windows with no name such as qtile's bar
rounded-corners-exclude = [
    "window_type = 'dock'",
    "! name~=''",
];

detect-rounded-corners = true;

detect-client-opacity = true;

#################################
#             Shadows           #
#################################

# Enabled client-side shadows on windows. Note desktop windows
# (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
# unless explicitly requested using the wintypes option.
#
# Can be set per-window using rules.
shadow = true;
shadow-radius = 12;

# The left offset for shadows, in pixels.
shadow-offset-x = -7;
shadow-offset-y = -7;

# For the qtile bar not having shadow
# and only set shadow for focused windows
shadow-exclude = [
    "!focused",
    "window_type = 'dock'",
    "! name~=''",
];

# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = true;

#################################
#           Fading              #
#################################
fading = false;

#################################
#   Transparency / Opacity      #
#################################
frame-opacity = 1.0;
inactive-dim-fixed = true;
inactive-dim = 0.05;

#################################
#            Blur               #
#################################

blur-kern = "3x3box";

#################################
#       General Settings        #
#################################

# Enable remote control via D-Bus. See the man page for more details.
#
# Default: false
# dbus = true

# Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
daemon = true

# Specify the backend to use: `xrender`, `glx`, or `egl`.
backend = "xrender"

dithered-present = false;

vsync = true;

detect-rounded-corners = true;

detect-client-opacity = true;

detect-transient = true;

use-damage = true;

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case insensitive.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
# Default: "warn"
# log-level = "warn";

# Set the log file.
# If *--log-file* is never specified, logs will be written to stderr.
# Otherwise, logs will to written to the given file, though some of the early
# logs might still be written to the stderr.
# When setting this option from the config file, it is recommended to use an absolute path.
#
# log-file = "/path/to/your/log/file"

# Write process ID to a file.
# write-pid-path = "/path/to/your/log/file"

# `@include` directive can be used to include additional configuration files.
# Relative paths are search either in the parent of this configuration file
# (when the configuration is loaded through a symlink, the symlink will be
# resolved first). Or in `$XDG_CONFIG_HOME/picom/include`.
#
# @include "extra.conf"
